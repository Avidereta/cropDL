import time
from visualizers.metrics import Metrics
metrics = Metrics()


def train_nn(N_EPOCHS):
    losses = []

    epoch = 1
    t_start = time.time()

    for i in range(N_EPOCHS):
        n_batches =0
        print "epoch", i
        t0 = time.time()
        for data, target in train_generator:
            target_flat = target.flatten()
            # make a binary vector of weights for target elements
            weights_target = np.where(target_flat < 0.5, nonlesion_weight, lesion_weight).astype(np.float32)
            ce_i, reg_i, acc_i = train_func(data.astype(np.float32), target_flat, weights_target)
            loss_i = ce_i + reg_i

            metrics["train loss"][epoch] = ce_i
            metrics["train full objective"][epoch] = loss_i
            metrics["train reg"][epoch] = reg_i
            losses.append(loss_i)
            n_batches += 1
            if n_batches > N_BATCHES_PER_EPOCH:
                break

        if epoch % 10 == 0:
            data, target = validation_generator.next()
            target_flat = target.flatten()

            weights_target = np.where(target_flat < 0.5, nonlesion_weight, lesion_weight).astype(np.float32)
            print "0 {}, 1 {}".format(np.sum(weights_target == 0), np.sum(weights_target > 0))
            ce_i, reg_i, acc_i = eval_func(data.astype(np.float32), target_flat, weights_target)
            loss_i = ce_i + reg_i

            metrics["test loss"][epoch] = ce_i
            metrics["test full objective"][epoch] = loss_i
            metrics["test reg"][epoch] = reg_i

        if epoch % 10 == 0:
            print "epoch:", epoch
            print 'mean loss for the last 10 epochs:', np.round(np.mean(losses[-10:]), 3)

        if epoch % 100 == 0:
            plt.figure(figsize=[15, 5])
            metrics.plot()

        epoch += 1
        print 'time for epoch: {} mins'.format(round((time.time() - t0) / 60.0, 3))
    print 'Overall time: {} mins'.format(round((time.time() - t_start) / 60.0, 3))